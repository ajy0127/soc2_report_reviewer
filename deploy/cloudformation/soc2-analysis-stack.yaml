AWSTemplateFormatVersion: '2010-09-09'
Description: 'SOC 2 Report Analysis Tool - Analyzes SOC 2 reports using AWS services and AI'

Parameters:
  StakeholderEmail:
    Type: String
    Default: compliance@example.com
    Description: Email address to send analysis results to
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: Must be a valid email address

  LogLevel:
    Type: String
    Default: INFO
    Description: Log level for Lambda function
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL

  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Amazon Bedrock model ID to use for analysis
    
  # Parameter for deployment bucket (where Lambda code is stored)
  DeploymentBucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package

  # Parameter for deployment prefix (path to Lambda code in bucket)
  DeploymentPrefix:
    Type: String
    Default: ""
    Description: Prefix for Lambda deployment package in S3 bucket

Resources:
  # S3 Bucket for SOC 2 reports and analysis results
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ArchiveOldReports
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: STANDARD_IA
              - TransitionInDays: 180
                StorageClass: GLACIER
      Tags:
        - Key: Purpose
          Value: SOC2ReportAnalysis

  # IAM Role for Lambda function
  AnalysisLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub "arn:aws:s3:::${ReportsBucket}/*"
        - PolicyName: TextractAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:DetectDocumentText
                  - textract:AnalyzeDocument
                  - textract:StartDocumentTextDetection
                  - textract:GetDocumentTextDetection
                Resource: "*"
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"

  # Lambda function for processing SOC 2 reports
  AnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 600 # 10 minutes
      MemorySize: 1024
      Role: !GetAtt AnalysisLambdaRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Sub "${DeploymentPrefix}/lambda_code.zip"
      Environment:
        Variables:
          STAKEHOLDER_EMAIL: !Ref StakeholderEmail
          LOG_LEVEL: !Ref LogLevel
          BEDROCK_MODEL_ID: !Ref BedrockModelId
      Tags:
        - Key: Purpose
          Value: SOC2ReportAnalysis

  # S3 Event Notification to trigger Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AnalysisFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${ReportsBucket}"

  # Update bucket notification configuration
  BucketNotificationResource:
    Type: Custom::S3BucketNotification
    DependsOn:
      - LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt NotificationFunction.Arn
      BucketName: !Ref ReportsBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              Key:
                FilterRules:
                  - Name: prefix
                    Value: reports/
                  - Name: suffix
                    Value: .pdf
            LambdaFunctionArn: !GetAtt AnalysisFunction.Arn

  # Lambda function to set up bucket notifications
  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationFunctionRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                      
                  props = event['ResourceProperties']
                  bucket_name = props['BucketName']
                  notification = props['NotificationConfiguration']
                  
                  s3 = boto3.client('s3')
                  s3.put_bucket_notification_configuration(
                      Bucket=bucket_name,
                      NotificationConfiguration=notification
                  )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM Role for notification Lambda function
  NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                  - s3:PutBucketNotificationConfiguration
                Resource:
                  - !Sub "arn:aws:s3:::${ReportsBucket}"

Outputs:
  ReportsBucketName:
    Description: Name of the S3 bucket for SOC 2 reports
    Value: !Ref ReportsBucket

  UploadPath:
    Description: Path to upload SOC 2 reports for analysis
    Value: !Sub "s3://${ReportsBucket}/reports/"

  LambdaFunctionName:
    Description: Name of the Lambda function for SOC 2 report analysis
    Value: !Ref AnalysisFunction

  LambdaFunctionArn:
    Description: ARN of the Lambda function for SOC 2 report analysis
    Value: !GetAtt AnalysisFunction.Arn 