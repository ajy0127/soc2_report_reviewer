name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-mock cfn-lint flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f lambda_package/requirements.txt ]; then pip install -r lambda_package/requirements.txt; fi
        if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Validate CloudFormation templates
      run: |
        cfn-lint template.yaml
        if [ -f template-local.yaml ]; then cfn-lint template-local.yaml; fi
        if [ -d cloudformation ]; then cfn-lint cloudformation/*.yaml; fi

    - name: Run tests
      run: |
        if [ -f run_tests.sh ]; then
          chmod +x run_tests.sh
          ./run_tests.sh
        else
          pytest tests/ -v
        fi
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_REGION: us-east-1
        # Mock AWS credentials for testing
        AWS_ACCESS_KEY_ID: mock-access-key
        AWS_SECRET_ACCESS_KEY: mock-secret-key

  build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install aws-sam-cli
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Build Lambda package
      run: |
        # Create deployment package
        cd lambda_package
        pip install -r requirements.txt -t .
        zip -r ../lambda_deployment.zip .
        cd ..
        echo "Lambda package created successfully"

    - name: Upload Lambda package artifact
      uses: actions/upload-artifact@v3
      with:
        name: lambda-package
        path: lambda_deployment.zip
        retention-days: 5
